{
  "scheduler": {
    "class": "<class 'torch._inductor.scheduler.Scheduler'>",
    "content": "skip: <torch._inductor.scheduler.Scheduler object at 0x7f52cff7c040>"
  },
  "node": {
    "class": "<class 'torch._inductor.ir.ExternKernelOut'>",
    "content": {
      "dataclass": "<class 'torch._inductor.ir.ExternKernelOut'>",
      "content": {
        "name": "buf0",
        "layout": {
          "dataclass": "<class 'torch._inductor.ir.FixedLayout'>",
          "content": {
            "device": "cuda:0",
            "dtype": "torch.float32",
            "size": [
              "8",
              "64"
            ],
            "_stride": [
              "cyclic reference: 64",
              "1"
            ],
            "offset": "0"
          }
        },
        "inputs": [
          {
            "dataclass": "<class 'torch._inductor.ir.InputBuffer'>",
            "content": {
              "name": "primals_2",
              "layout": {
                "dataclass": "<class 'torch._inductor.ir.FixedLayout'>",
                "content": {
                  "device": "cuda:0",
                  "dtype": "cyclic reference: torch.float32",
                  "size": [
                    "cyclic reference: 64"
                  ],
                  "_stride": [
                    "cyclic reference: 1"
                  ],
                  "offset": "cyclic reference: 0"
                }
              },
              "origins": [
                {
                  "graph": {
                    "class": "<class 'torch.fx.graph.Graph'>",
                    "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                  },
                  "name": {
                    "class": "<class 'str'>",
                    "content": "primals_2"
                  },
                  "op": {
                    "class": "<class 'str'>",
                    "content": "placeholder"
                  },
                  "target": {
                    "class": "<class 'str'>",
                    "content": "cyclic reference: primals_2"
                  },
                  "_input_nodes": {
                    "class": "<class 'dict'>",
                    "content": {}
                  },
                  "_args": {
                    "class": "<class 'tuple'>",
                    "content": []
                  },
                  "_kwargs": {
                    "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                    "content": {}
                  },
                  "users": {
                    "class": "<class 'dict'>",
                    "content": {
                      "addmm": "None"
                    }
                  },
                  "type": {
                    "class": "<class 'NoneType'>",
                    "content": "cyclic reference: None"
                  },
                  "_prev": {
                    "class": "<class 'torch.fx.node.Node'>",
                    "content": {
                      "graph": {
                        "class": "<class 'torch.fx.graph.Graph'>",
                        "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                      },
                      "name": {
                        "class": "<class 'str'>",
                        "content": "primals_1"
                      },
                      "op": {
                        "class": "<class 'str'>",
                        "content": "cyclic reference: placeholder"
                      },
                      "target": {
                        "class": "<class 'str'>",
                        "content": "primals_1"
                      },
                      "_input_nodes": {
                        "class": "<class 'dict'>",
                        "content": {}
                      },
                      "_args": {
                        "class": "<class 'tuple'>",
                        "content": []
                      },
                      "_kwargs": {
                        "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                        "content": {}
                      },
                      "users": {
                        "class": "<class 'dict'>",
                        "content": {
                          "permute": "cyclic reference: None"
                        }
                      },
                      "type": {
                        "class": "<class 'NoneType'>",
                        "content": "cyclic reference: None"
                      },
                      "_prev": {
                        "class": "<class 'torch.fx.node.Node'>",
                        "content": {
                          "graph": {
                            "class": "<class 'torch.fx.graph.Graph'>",
                            "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                          },
                          "name": {
                            "class": "<class 'str'>",
                            "content": ""
                          },
                          "op": {
                            "class": "<class 'str'>",
                            "content": "root"
                          },
                          "target": {
                            "class": "<class 'str'>",
                            "content": "cyclic reference: "
                          },
                          "_input_nodes": {
                            "class": "<class 'dict'>",
                            "content": {}
                          },
                          "_args": {
                            "class": "<class 'tuple'>",
                            "content": []
                          },
                          "_kwargs": {
                            "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                            "content": {}
                          },
                          "users": {
                            "class": "<class 'dict'>",
                            "content": {}
                          },
                          "type": {
                            "class": "<class 'NoneType'>",
                            "content": "cyclic reference: None"
                          },
                          "_prev": {
                            "class": "<class 'torch.fx.node.Node'>",
                            "content": {
                              "graph": {
                                "class": "<class 'torch.fx.graph.Graph'>",
                                "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                              },
                              "name": {
                                "class": "<class 'str'>",
                                "content": "output"
                              },
                              "op": {
                                "class": "<class 'str'>",
                                "content": "output"
                              },
                              "target": {
                                "class": "<class 'str'>",
                                "content": "cyclic reference: output"
                              },
                              "_input_nodes": {
                                "class": "<class 'dict'>",
                                "content": {
                                  "mul_2": "cyclic reference: None",
                                  "primals_3": "cyclic reference: None",
                                  "addmm": "cyclic reference: None"
                                }
                              },
                              "_args": {
                                "class": "<class 'tuple'>",
                                "content": [
                                  [
                                    {
                                      "graph": {
                                        "class": "<class 'torch.fx.graph.Graph'>",
                                        "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                      },
                                      "name": {
                                        "class": "<class 'str'>",
                                        "content": "mul_2"
                                      },
                                      "op": {
                                        "class": "<class 'str'>",
                                        "content": "call_function"
                                      },
                                      "target": {
                                        "class": "<class 'torch._ops.OpOverload'>",
                                        "content": {
                                          "_op": {
                                            "class": "<class 'builtin_function_or_method'>",
                                            "content": "<built-in method  of PyCapsule object at 0x7f52cf22bf90>"
                                          },
                                          "_op_dk": {
                                            "class": "<class 'builtin_function_or_method'>",
                                            "content": "<built-in method  of PyCapsule object at 0x7f52cf22bfc0>"
                                          },
                                          "_schema": {
                                            "class": "<class 'torch.FunctionSchema'>",
                                            "content": "aten::mul.Tensor(Tensor self, Tensor other) -> Tensor"
                                          },
                                          "_overloadpacket": {
                                            "class": "<class 'torch._ops.OpOverloadPacket'>",
                                            "content": {
                                              "_qualified_op_name": {
                                                "class": "<class 'str'>",
                                                "content": "aten::mul"
                                              },
                                              "__name__": {
                                                "class": "<class 'str'>",
                                                "content": "mul"
                                              },
                                              "_op": {
                                                "class": "<class 'builtin_function_or_method'>",
                                                "content": "<built-in method mul of PyCapsule object at 0x7f52d0abcab0>"
                                              },
                                              "_overload_names": {
                                                "class": "<class 'list'>",
                                                "content": [
                                                  "Tensor",
                                                  "Scalar",
                                                  "out",
                                                  "Scalar_out",
                                                  "left_t",
                                                  "right_",
                                                  "int",
                                                  "complex",
                                                  "float",
                                                  "int_complex",
                                                  "complex_int",
                                                  "float_complex",
                                                  "complex_float",
                                                  "int_float",
                                                  "float_int",
                                                  "cyclic reference: "
                                                ]
                                              },
                                              "_dir": {
                                                "class": "<class 'list'>",
                                                "content": [
                                                  "cyclic reference: Tensor",
                                                  "cyclic reference: Scalar",
                                                  "cyclic reference: out",
                                                  "cyclic reference: Scalar_out",
                                                  "cyclic reference: left_t",
                                                  "cyclic reference: right_",
                                                  "cyclic reference: int",
                                                  "cyclic reference: complex",
                                                  "cyclic reference: float",
                                                  "cyclic reference: int_complex",
                                                  "cyclic reference: complex_int",
                                                  "cyclic reference: float_complex",
                                                  "cyclic reference: complex_float",
                                                  "cyclic reference: int_float",
                                                  "cyclic reference: float_int",
                                                  "default"
                                                ]
                                              },
                                              "__module__": {
                                                "class": "<class 'str'>",
                                                "content": "torch._ops.aten"
                                              },
                                              "Tensor": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": "cyclic reference: aten.mul.Tensor"
                                              },
                                              "Scalar": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c060>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c090>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.Scalar(Tensor self, Scalar other) -> Tensor"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": [
                                                      "Tag.pointwise",
                                                      "Tag.core"
                                                    ]
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "Scalar"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.Scalar"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {
                                                      "DispatchKey.Meta": {
                                                        "__wrapped__": {
                                                          "class": "<class 'function'>",
                                                          "content": {
                                                            "__wrapped__": {
                                                              "class": "<class 'function'>",
                                                              "content": {}
                                                            },
                                                            "__signature__": {
                                                              "class": "<class 'inspect.Signature'>",
                                                              "content": "(a: Union[torch.Tensor, bool, int, float, complex], b: Union[torch.Tensor, bool, int, float, complex]) -> torch.Tensor"
                                                            }
                                                          }
                                                        },
                                                        "__signature__": {
                                                          "class": "<class 'inspect.Signature'>",
                                                          "content": "(a: Union[torch.Tensor, bool, int, float, complex], b: Union[torch.Tensor, bool, int, float, complex], *, out: torch.Tensor = None) -> torch.Tensor"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.Scalar"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.Scalar"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "False"
                                                  }
                                                }
                                              },
                                              "out": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c0f0>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c120>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": [
                                                      "Tag.pointwise"
                                                    ]
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "out"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.out"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {
                                                      "DispatchKey.Meta": "cyclic reference: <function mul at 0x7f52cf225c60>"
                                                    }
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.out"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.out"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "Scalar_out": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c180>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c1b0>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": [
                                                      "Tag.generated"
                                                    ]
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "Scalar_out"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.Scalar_out"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {
                                                      "DispatchKey.Meta": "cyclic reference: <function mul at 0x7f52cf225c60>"
                                                    }
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.Scalar_out"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.Scalar_out"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "left_t": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c210>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c240>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.left_t(t[] l, int n) -> t[]"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "left_t"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.left_t"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.left_t"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.left_t"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "right_": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c2a0>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c2d0>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.right_(int n, t[] l) -> t[]"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "right_"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.right_"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.right_"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.right_"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "int": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c330>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c360>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.int(int a, int b) -> int"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "int"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.int"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.int"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.int"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "complex": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c3c0>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c3f0>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.complex(complex a, complex b) -> complex"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "complex"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.complex"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.complex"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.complex"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "float": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c450>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c480>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.float(float a, float b) -> float"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "float"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.float"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.float"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.float"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "int_complex": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c4e0>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c510>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.int_complex(int a, complex b) -> complex"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "int_complex"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.int_complex"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.int_complex"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.int_complex"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "complex_int": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c570>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c5a0>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.complex_int(complex a, int b) -> complex"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "complex_int"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.complex_int"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.complex_int"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.complex_int"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "float_complex": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c600>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c630>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.float_complex(float a, complex b) -> complex"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "float_complex"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.float_complex"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.float_complex"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.float_complex"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "complex_float": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c690>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c6c0>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.complex_float(complex a, float b) -> complex"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "complex_float"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.complex_float"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.complex_float"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.complex_float"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "int_float": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c720>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c750>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.int_float(int a, float b) -> float"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "int_float"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.int_float"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.int_float"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.int_float"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "float_int": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c7b0>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c7e0>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul.float_int(float a, int b) -> float"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "float_int"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul.float_int"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.float_int"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul.float_int"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              },
                                              "default": {
                                                "class": "<class 'torch._ops.OpOverload'>",
                                                "content": {
                                                  "_op": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c840>"
                                                  },
                                                  "_op_dk": {
                                                    "class": "<class 'builtin_function_or_method'>",
                                                    "content": "<built-in method  of PyCapsule object at 0x7f52cf23c870>"
                                                  },
                                                  "_schema": {
                                                    "class": "<class 'torch.FunctionSchema'>",
                                                    "content": "aten::mul(Scalar a, Scalar b) -> Scalar"
                                                  },
                                                  "_overloadpacket": {
                                                    "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                    "content": "cyclic reference: aten.mul"
                                                  },
                                                  "_tags": {
                                                    "class": "<class 'list'>",
                                                    "content": []
                                                  },
                                                  "_overloadname": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: default"
                                                  },
                                                  "_name": {
                                                    "class": "<class 'str'>",
                                                    "content": "aten::mul"
                                                  },
                                                  "py_kernels": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__name__": {
                                                    "class": "<class 'str'>",
                                                    "content": "mul.default"
                                                  },
                                                  "python_key_mode_table": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "__module__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: torch._ops.aten"
                                                  },
                                                  "__qualname__": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: aten::mul"
                                                  },
                                                  "__annotations__": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "_dispatch_cache": {
                                                    "class": "<class 'dict'>",
                                                    "content": {}
                                                  },
                                                  "is_view": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "_tags": {
                                            "class": "<class 'list'>",
                                            "content": [
                                              "Tag.pointwise",
                                              "Tag.core"
                                            ]
                                          },
                                          "_overloadname": {
                                            "class": "<class 'str'>",
                                            "content": "Tensor"
                                          },
                                          "_name": {
                                            "class": "<class 'str'>",
                                            "content": "aten::mul.Tensor"
                                          },
                                          "py_kernels": {
                                            "class": "<class 'dict'>",
                                            "content": {
                                              "DispatchKey.Meta": "cyclic reference: <function mul at 0x7f52cf225c60>"
                                            }
                                          },
                                          "__name__": {
                                            "class": "<class 'str'>",
                                            "content": "mul.Tensor"
                                          },
                                          "python_key_mode_table": {
                                            "class": "<class 'dict'>",
                                            "content": {}
                                          },
                                          "__module__": {
                                            "class": "<class 'str'>",
                                            "content": "cyclic reference: torch._ops.aten"
                                          },
                                          "__qualname__": {
                                            "class": "<class 'str'>",
                                            "content": "cyclic reference: aten::mul.Tensor"
                                          },
                                          "__annotations__": {
                                            "class": "<class 'dict'>",
                                            "content": {}
                                          },
                                          "_dispatch_cache": {
                                            "class": "<class 'dict'>",
                                            "content": {
                                              "DispatchKey.Python": "DispatchKey.Python",
                                              "DispatchKey.Meta": "cyclic reference: <function mul at 0x7f52cf225c60>"
                                            }
                                          },
                                          "is_view": {
                                            "class": "<class 'bool'>",
                                            "content": "cyclic reference: False"
                                          }
                                        }
                                      },
                                      "_input_nodes": {
                                        "class": "<class 'dict'>",
                                        "content": {
                                          "mul": "cyclic reference: None",
                                          "add": "cyclic reference: None"
                                        }
                                      },
                                      "_args": {
                                        "class": "<class 'tuple'>",
                                        "content": [
                                          {
                                            "graph": {
                                              "class": "<class 'torch.fx.graph.Graph'>",
                                              "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                            },
                                            "name": {
                                              "class": "<class 'str'>",
                                              "content": "mul"
                                            },
                                            "op": {
                                              "class": "<class 'str'>",
                                              "content": "cyclic reference: call_function"
                                            },
                                            "target": {
                                              "class": "<class 'torch._ops.OpOverload'>",
                                              "content": "cyclic reference: aten.mul.Tensor"
                                            },
                                            "_input_nodes": {
                                              "class": "<class 'dict'>",
                                              "content": {
                                                "addmm": "cyclic reference: None"
                                              }
                                            },
                                            "_args": {
                                              "class": "<class 'tuple'>",
                                              "content": [
                                                {
                                                  "graph": {
                                                    "class": "<class 'torch.fx.graph.Graph'>",
                                                    "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                                  },
                                                  "name": {
                                                    "class": "<class 'str'>",
                                                    "content": "addmm"
                                                  },
                                                  "op": {
                                                    "class": "<class 'str'>",
                                                    "content": "cyclic reference: call_function"
                                                  },
                                                  "target": {
                                                    "class": "<class 'torch._ops.OpOverload'>",
                                                    "content": {
                                                      "_op": {
                                                        "class": "<class 'builtin_function_or_method'>",
                                                        "content": "<built-in method  of PyCapsule object at 0x7f52cf2eb300>"
                                                      },
                                                      "_op_dk": {
                                                        "class": "<class 'builtin_function_or_method'>",
                                                        "content": "<built-in method  of PyCapsule object at 0x7f52cf2eb330>"
                                                      },
                                                      "_schema": {
                                                        "class": "<class 'torch.FunctionSchema'>",
                                                        "content": "aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor"
                                                      },
                                                      "_overloadpacket": {
                                                        "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                        "content": {
                                                          "_qualified_op_name": {
                                                            "class": "<class 'str'>",
                                                            "content": "aten::addmm"
                                                          },
                                                          "__name__": {
                                                            "class": "<class 'str'>",
                                                            "content": "addmm"
                                                          },
                                                          "_op": {
                                                            "class": "<class 'builtin_function_or_method'>",
                                                            "content": "<built-in method addmm of PyCapsule object at 0x7f52cf2eaa00>"
                                                          },
                                                          "_overload_names": {
                                                            "class": "<class 'list'>",
                                                            "content": [
                                                              "cyclic reference: ",
                                                              "out"
                                                            ]
                                                          },
                                                          "_dir": {
                                                            "class": "<class 'list'>",
                                                            "content": [
                                                              "cyclic reference: default",
                                                              "cyclic reference: out"
                                                            ]
                                                          },
                                                          "__module__": {
                                                            "class": "<class 'str'>",
                                                            "content": "torch._ops.aten"
                                                          },
                                                          "default": {
                                                            "class": "<class 'torch._ops.OpOverload'>",
                                                            "content": "cyclic reference: aten.addmm.default"
                                                          },
                                                          "out": {
                                                            "class": "<class 'torch._ops.OpOverload'>",
                                                            "content": {
                                                              "_op": {
                                                                "class": "<class 'builtin_function_or_method'>",
                                                                "content": "<built-in method  of PyCapsule object at 0x7f52cf2eb390>"
                                                              },
                                                              "_op_dk": {
                                                                "class": "<class 'builtin_function_or_method'>",
                                                                "content": "<built-in method  of PyCapsule object at 0x7f52cf2eb3f0>"
                                                              },
                                                              "_schema": {
                                                                "class": "<class 'torch.FunctionSchema'>",
                                                                "content": "aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)"
                                                              },
                                                              "_overloadpacket": {
                                                                "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                "content": "cyclic reference: aten.addmm"
                                                              },
                                                              "_tags": {
                                                                "class": "<class 'list'>",
                                                                "content": []
                                                              },
                                                              "_overloadname": {
                                                                "class": "<class 'str'>",
                                                                "content": "out"
                                                              },
                                                              "_name": {
                                                                "class": "<class 'str'>",
                                                                "content": "aten::addmm.out"
                                                              },
                                                              "py_kernels": {
                                                                "class": "<class 'dict'>",
                                                                "content": {
                                                                  "DispatchKey.Meta": {
                                                                    "__wrapped__": {
                                                                      "class": "<class 'function'>",
                                                                      "content": {
                                                                        "__wrapped__": {
                                                                          "class": "<class 'function'>",
                                                                          "content": {}
                                                                        }
                                                                      }
                                                                    },
                                                                    "__signature__": {
                                                                      "class": "<class 'inspect.Signature'>",
                                                                      "content": "(self: torch.Tensor, mat1: torch.Tensor, mat2: torch.Tensor, beta: int = 1, alpha: int = 1, *, out: torch.Tensor = None) -> torch.Tensor"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "__name__": {
                                                                "class": "<class 'str'>",
                                                                "content": "addmm.out"
                                                              },
                                                              "python_key_mode_table": {
                                                                "class": "<class 'dict'>",
                                                                "content": {}
                                                              },
                                                              "__module__": {
                                                                "class": "<class 'str'>",
                                                                "content": "cyclic reference: torch._ops.aten"
                                                              },
                                                              "__qualname__": {
                                                                "class": "<class 'str'>",
                                                                "content": "cyclic reference: aten::addmm.out"
                                                              },
                                                              "__annotations__": {
                                                                "class": "<class 'dict'>",
                                                                "content": {}
                                                              },
                                                              "_dispatch_cache": {
                                                                "class": "<class 'dict'>",
                                                                "content": {}
                                                              },
                                                              "is_view": {
                                                                "class": "<class 'bool'>",
                                                                "content": "cyclic reference: False"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "_tags": {
                                                        "class": "<class 'list'>",
                                                        "content": [
                                                          "Tag.core"
                                                        ]
                                                      },
                                                      "_overloadname": {
                                                        "class": "<class 'str'>",
                                                        "content": "cyclic reference: default"
                                                      },
                                                      "_name": {
                                                        "class": "<class 'str'>",
                                                        "content": "aten::addmm"
                                                      },
                                                      "py_kernels": {
                                                        "class": "<class 'dict'>",
                                                        "content": {
                                                          "DispatchKey.Meta": "cyclic reference: <function addmm at 0x7f52cf2f8f70>"
                                                        }
                                                      },
                                                      "__name__": {
                                                        "class": "<class 'str'>",
                                                        "content": "addmm.default"
                                                      },
                                                      "python_key_mode_table": {
                                                        "class": "<class 'dict'>",
                                                        "content": {}
                                                      },
                                                      "__module__": {
                                                        "class": "<class 'str'>",
                                                        "content": "cyclic reference: torch._ops.aten"
                                                      },
                                                      "__qualname__": {
                                                        "class": "<class 'str'>",
                                                        "content": "cyclic reference: aten::addmm"
                                                      },
                                                      "__annotations__": {
                                                        "class": "<class 'dict'>",
                                                        "content": {}
                                                      },
                                                      "_dispatch_cache": {
                                                        "class": "<class 'dict'>",
                                                        "content": {
                                                          "DispatchKey.PythonTLSSnapshot": "DispatchKey.PythonTLSSnapshot",
                                                          "DispatchKey.AutogradCUDA": "DispatchKey.Autograd",
                                                          "DispatchKey.Python": "DispatchKey.Python",
                                                          "DispatchKey.Functionalize": "DispatchKey.Functionalize"
                                                        }
                                                      },
                                                      "is_view": {
                                                        "class": "<class 'bool'>",
                                                        "content": "cyclic reference: False"
                                                      }
                                                    }
                                                  },
                                                  "_input_nodes": {
                                                    "class": "<class 'dict'>",
                                                    "content": {
                                                      "primals_2": "cyclic reference: None",
                                                      "primals_3": "cyclic reference: None",
                                                      "permute": "cyclic reference: None"
                                                    }
                                                  },
                                                  "_args": {
                                                    "class": "<class 'tuple'>",
                                                    "content": [
                                                      "cyclic reference: primals_2",
                                                      {
                                                        "graph": {
                                                          "class": "<class 'torch.fx.graph.Graph'>",
                                                          "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                                        },
                                                        "name": {
                                                          "class": "<class 'str'>",
                                                          "content": "primals_3"
                                                        },
                                                        "op": {
                                                          "class": "<class 'str'>",
                                                          "content": "cyclic reference: placeholder"
                                                        },
                                                        "target": {
                                                          "class": "<class 'str'>",
                                                          "content": "primals_3"
                                                        },
                                                        "_input_nodes": {
                                                          "class": "<class 'dict'>",
                                                          "content": {}
                                                        },
                                                        "_args": {
                                                          "class": "<class 'tuple'>",
                                                          "content": []
                                                        },
                                                        "_kwargs": {
                                                          "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                                          "content": {}
                                                        },
                                                        "users": {
                                                          "class": "<class 'dict'>",
                                                          "content": {
                                                            "addmm": "cyclic reference: None",
                                                            "output": "cyclic reference: None"
                                                          }
                                                        },
                                                        "type": {
                                                          "class": "<class 'NoneType'>",
                                                          "content": "cyclic reference: None"
                                                        },
                                                        "_prev": {
                                                          "class": "<class 'torch.fx.node.Node'>",
                                                          "content": "cyclic reference: primals_2"
                                                        },
                                                        "_next": {
                                                          "class": "<class 'torch.fx.node.Node'>",
                                                          "content": {
                                                            "graph": {
                                                              "class": "<class 'torch.fx.graph.Graph'>",
                                                              "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                                            },
                                                            "name": {
                                                              "class": "<class 'str'>",
                                                              "content": "permute"
                                                            },
                                                            "op": {
                                                              "class": "<class 'str'>",
                                                              "content": "cyclic reference: call_function"
                                                            },
                                                            "target": {
                                                              "class": "<class 'torch._ops.OpOverload'>",
                                                              "content": {
                                                                "_op": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf26ed00>"
                                                                },
                                                                "_op_dk": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf26ed30>"
                                                                },
                                                                "_schema": {
                                                                  "class": "<class 'torch.FunctionSchema'>",
                                                                  "content": "aten::permute(Tensor(a) self, int[] dims) -> Tensor(a)"
                                                                },
                                                                "_overloadpacket": {
                                                                  "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                  "content": {
                                                                    "_qualified_op_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::permute"
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "permute"
                                                                    },
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method permute of PyCapsule object at 0x7f52cf26e820>"
                                                                    },
                                                                    "_overload_names": {
                                                                      "class": "<class 'list'>",
                                                                      "content": [
                                                                        "cyclic reference: "
                                                                      ]
                                                                    },
                                                                    "_dir": {
                                                                      "class": "<class 'list'>",
                                                                      "content": [
                                                                        "cyclic reference: default"
                                                                      ]
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "torch._ops.aten"
                                                                    },
                                                                    "default": {
                                                                      "class": "<class 'torch._ops.OpOverload'>",
                                                                      "content": "cyclic reference: aten.permute.default"
                                                                    }
                                                                  }
                                                                },
                                                                "_tags": {
                                                                  "class": "<class 'list'>",
                                                                  "content": [
                                                                    "Tag.core"
                                                                  ]
                                                                },
                                                                "_overloadname": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: default"
                                                                },
                                                                "_name": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "aten::permute"
                                                                },
                                                                "py_kernels": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {
                                                                    "DispatchKey.Meta": {}
                                                                  }
                                                                },
                                                                "__name__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "permute.default"
                                                                },
                                                                "python_key_mode_table": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__module__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: torch._ops.aten"
                                                                },
                                                                "__qualname__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: aten::permute"
                                                                },
                                                                "__annotations__": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "_dispatch_cache": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {
                                                                    "DispatchKey.Meta": "cyclic reference: <function permute at 0x7f52cf261d80>",
                                                                    "DispatchKey.Python": "DispatchKey.Python"
                                                                  }
                                                                },
                                                                "is_view": {
                                                                  "class": "<class 'bool'>",
                                                                  "content": "True"
                                                                }
                                                              }
                                                            },
                                                            "_input_nodes": {
                                                              "class": "<class 'dict'>",
                                                              "content": {
                                                                "primals_1": "cyclic reference: None"
                                                              }
                                                            },
                                                            "_args": {
                                                              "class": "<class 'tuple'>",
                                                              "content": [
                                                                "cyclic reference: primals_1",
                                                                [
                                                                  "1",
                                                                  "0"
                                                                ]
                                                              ]
                                                            },
                                                            "_kwargs": {
                                                              "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                                              "content": {}
                                                            },
                                                            "users": {
                                                              "class": "<class 'dict'>",
                                                              "content": {
                                                                "addmm": "cyclic reference: None"
                                                              }
                                                            },
                                                            "type": {
                                                              "class": "<class 'NoneType'>",
                                                              "content": "cyclic reference: None"
                                                            },
                                                            "_prev": {
                                                              "class": "<class 'torch.fx.node.Node'>",
                                                              "content": "cyclic reference: primals_3"
                                                            },
                                                            "_next": {
                                                              "class": "<class 'torch.fx.node.Node'>",
                                                              "content": "cyclic reference: addmm"
                                                            },
                                                            "_erased": {
                                                              "class": "<class 'bool'>",
                                                              "content": "cyclic reference: False"
                                                            },
                                                            "_repr_fn": {
                                                              "class": "<class 'NoneType'>",
                                                              "content": "cyclic reference: None"
                                                            },
                                                            "meta": {
                                                              "class": "<class 'dict'>",
                                                              "content": {
                                                                "stack_trace": "  File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 71, in forward\n    x = self.fc1(x)\n |   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 116, in inference_func\n    return model(inp)\n",
                                                                "nn_module_stack": {
                                                                  "model": {
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "__main__"
                                                                    },
                                                                    "__init__": {
                                                                      "class": "<class 'function'>",
                                                                      "content": {}
                                                                    },
                                                                    "forward": {
                                                                      "class": "<class 'function'>",
                                                                      "content": {}
                                                                    },
                                                                    "__doc__": {
                                                                      "class": "<class 'NoneType'>",
                                                                      "content": "cyclic reference: None"
                                                                    }
                                                                  },
                                                                  "model_fc1": {
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "torch.nn.modules.linear"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {
                                                                        "in_features": {
                                                                          "__new__": {
                                                                            "class": "<class 'builtin_function_or_method'>",
                                                                            "content": "<built-in method __new__ of type object at 0x74b580>"
                                                                          },
                                                                          "__repr__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__repr__' of 'int' objects>"
                                                                          },
                                                                          "__hash__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__hash__' of 'int' objects>"
                                                                          },
                                                                          "__getattribute__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__getattribute__' of 'int' objects>"
                                                                          },
                                                                          "__lt__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__lt__' of 'int' objects>"
                                                                          },
                                                                          "__le__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__le__' of 'int' objects>"
                                                                          },
                                                                          "__eq__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__eq__' of 'int' objects>"
                                                                          },
                                                                          "__ne__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__ne__' of 'int' objects>"
                                                                          },
                                                                          "__gt__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__gt__' of 'int' objects>"
                                                                          },
                                                                          "__ge__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__ge__' of 'int' objects>"
                                                                          },
                                                                          "__add__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__add__' of 'int' objects>"
                                                                          },
                                                                          "__radd__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__radd__' of 'int' objects>"
                                                                          },
                                                                          "__sub__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__sub__' of 'int' objects>"
                                                                          },
                                                                          "__rsub__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rsub__' of 'int' objects>"
                                                                          },
                                                                          "__mul__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__mul__' of 'int' objects>"
                                                                          },
                                                                          "__rmul__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rmul__' of 'int' objects>"
                                                                          },
                                                                          "__mod__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__mod__' of 'int' objects>"
                                                                          },
                                                                          "__rmod__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rmod__' of 'int' objects>"
                                                                          },
                                                                          "__divmod__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__divmod__' of 'int' objects>"
                                                                          },
                                                                          "__rdivmod__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rdivmod__' of 'int' objects>"
                                                                          },
                                                                          "__pow__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__pow__' of 'int' objects>"
                                                                          },
                                                                          "__rpow__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rpow__' of 'int' objects>"
                                                                          },
                                                                          "__neg__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__neg__' of 'int' objects>"
                                                                          },
                                                                          "__pos__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__pos__' of 'int' objects>"
                                                                          },
                                                                          "__abs__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__abs__' of 'int' objects>"
                                                                          },
                                                                          "__bool__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__bool__' of 'int' objects>"
                                                                          },
                                                                          "__invert__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__invert__' of 'int' objects>"
                                                                          },
                                                                          "__lshift__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__lshift__' of 'int' objects>"
                                                                          },
                                                                          "__rlshift__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rlshift__' of 'int' objects>"
                                                                          },
                                                                          "__rshift__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rshift__' of 'int' objects>"
                                                                          },
                                                                          "__rrshift__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rrshift__' of 'int' objects>"
                                                                          },
                                                                          "__and__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__and__' of 'int' objects>"
                                                                          },
                                                                          "__rand__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rand__' of 'int' objects>"
                                                                          },
                                                                          "__xor__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__xor__' of 'int' objects>"
                                                                          },
                                                                          "__rxor__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rxor__' of 'int' objects>"
                                                                          },
                                                                          "__or__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__or__' of 'int' objects>"
                                                                          },
                                                                          "__ror__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__ror__' of 'int' objects>"
                                                                          },
                                                                          "__int__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__int__' of 'int' objects>"
                                                                          },
                                                                          "__float__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__float__' of 'int' objects>"
                                                                          },
                                                                          "__floordiv__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__floordiv__' of 'int' objects>"
                                                                          },
                                                                          "__rfloordiv__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rfloordiv__' of 'int' objects>"
                                                                          },
                                                                          "__truediv__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__truediv__' of 'int' objects>"
                                                                          },
                                                                          "__rtruediv__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__rtruediv__' of 'int' objects>"
                                                                          },
                                                                          "__index__": {
                                                                            "class": "<class 'wrapper_descriptor'>",
                                                                            "content": "<slot wrapper '__index__' of 'int' objects>"
                                                                          },
                                                                          "conjugate": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'conjugate' of 'int' objects>"
                                                                          },
                                                                          "bit_length": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'bit_length' of 'int' objects>"
                                                                          },
                                                                          "bit_count": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'bit_count' of 'int' objects>"
                                                                          },
                                                                          "to_bytes": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'to_bytes' of 'int' objects>"
                                                                          },
                                                                          "from_bytes": {
                                                                            "class": "<class 'classmethod_descriptor'>",
                                                                            "content": "<method 'from_bytes' of 'int' objects>"
                                                                          },
                                                                          "as_integer_ratio": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'as_integer_ratio' of 'int' objects>"
                                                                          },
                                                                          "__trunc__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__trunc__' of 'int' objects>"
                                                                          },
                                                                          "__floor__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__floor__' of 'int' objects>"
                                                                          },
                                                                          "__ceil__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__ceil__' of 'int' objects>"
                                                                          },
                                                                          "__round__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__round__' of 'int' objects>"
                                                                          },
                                                                          "__getnewargs__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__getnewargs__' of 'int' objects>"
                                                                          },
                                                                          "__format__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__format__' of 'int' objects>"
                                                                          },
                                                                          "__sizeof__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__sizeof__' of 'int' objects>"
                                                                          },
                                                                          "real": {
                                                                            "class": "<class 'getset_descriptor'>",
                                                                            "content": "<attribute 'real' of 'int' objects>"
                                                                          },
                                                                          "imag": {
                                                                            "class": "<class 'getset_descriptor'>",
                                                                            "content": "<attribute 'imag' of 'int' objects>"
                                                                          },
                                                                          "numerator": {
                                                                            "class": "<class 'getset_descriptor'>",
                                                                            "content": "<attribute 'numerator' of 'int' objects>"
                                                                          },
                                                                          "denominator": {
                                                                            "class": "<class 'getset_descriptor'>",
                                                                            "content": "<attribute 'denominator' of 'int' objects>"
                                                                          },
                                                                          "__doc__": {
                                                                            "class": "<class 'str'>",
                                                                            "content": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
                                                                          }
                                                                        },
                                                                        "out_features": "cyclic reference: <class 'int'>",
                                                                        "weight": {
                                                                          "__module__": {
                                                                            "class": "<class 'str'>",
                                                                            "content": "torch"
                                                                          },
                                                                          "__deepcopy__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__reduce_ex__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "storage": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "_typed_storage": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "_reduce_ex_internal": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__setstate__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__repr__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "backward": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "register_hook": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "reinforce": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "detach": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'detach' of 'torch._C._TensorBase' objects>"
                                                                          },
                                                                          "detach_": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'detach_' of 'torch._C._TensorBase' objects>"
                                                                          },
                                                                          "is_shared": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "share_memory_": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__reversed__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "norm": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "solve": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "lstsq": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "eig": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "symeig": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "lu": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "stft": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "istft": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "resize": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "resize_as": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "split": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "unique": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "unique_consecutive": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__rsub__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__rdiv__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__rtruediv__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": "cyclic reference: <function Tensor.__rdiv__ at 0x7f52d1dade10>"
                                                                          },
                                                                          "__itruediv__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method '__idiv__' of 'torch._C._TensorBase' objects>"
                                                                          },
                                                                          "__pow__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'method_descriptor'>",
                                                                                "content": "<method 'pow' of 'torch._C._TensorBase' objects>"
                                                                              }
                                                                            }
                                                                          },
                                                                          "__ipow__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'method_descriptor'>",
                                                                                "content": "<method 'pow_' of 'torch._C._TensorBase' objects>"
                                                                              }
                                                                            }
                                                                          },
                                                                          "__rmod__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__format__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__rpow__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__floordiv__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__rfloordiv__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__rlshift__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__rrshift__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__rmatmul__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__pos__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'positive' of 'torch._C._TensorBase' objects>"
                                                                          },
                                                                          "__neg__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'neg' of 'torch._C._TensorBase' objects>"
                                                                          },
                                                                          "__abs__": {
                                                                            "class": "<class 'method_descriptor'>",
                                                                            "content": "<method 'abs' of 'torch._C._TensorBase' objects>"
                                                                          },
                                                                          "__len__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__iter__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__hash__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__dir__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__array_priority__": {
                                                                            "class": "<class 'int'>",
                                                                            "content": "1000"
                                                                          },
                                                                          "__array__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__array_wrap__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__contains__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__cuda_array_interface__": {
                                                                            "class": "<class 'property'>",
                                                                            "content": "<property object at 0x7f52d1da5030>"
                                                                          },
                                                                          "storage_type": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "refine_names": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "align_to": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "unflatten": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "rename_": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "rename": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "to_sparse_coo": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "_update_names": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__torch_function__": {
                                                                            "class": "<class 'classmethod'>",
                                                                            "content": {
                                                                              "__module__": {
                                                                                "class": "<class 'str'>",
                                                                                "content": "torch._tensor"
                                                                              },
                                                                              "__name__": {
                                                                                "class": "<class 'str'>",
                                                                                "content": "__torch_function__"
                                                                              },
                                                                              "__qualname__": {
                                                                                "class": "<class 'str'>",
                                                                                "content": "Tensor.__torch_function__"
                                                                              },
                                                                              "__doc__": {
                                                                                "class": "<class 'str'>",
                                                                                "content": "\n        This __torch_function__ implementation wraps subclasses such that\n        methods called on subclasses return a subclass instance instead of\n        a ``torch.Tensor`` instance.\n\n        One corollary to this is that you need coverage for torch.Tensor\n        methods if implementing __torch_function__ for subclasses.\n\n        We recommend always calling ``super().__torch_function__`` as the base\n        case when doing the above.\n\n        While not mandatory, we recommend making `__torch_function__` a classmethod.\n        "
                                                                              },
                                                                              "__annotations__": {
                                                                                "class": "<class 'dict'>",
                                                                                "content": {}
                                                                              }
                                                                            }
                                                                          },
                                                                          "__torch_dispatch__": {
                                                                            "class": "<class 'builtin_function_or_method'>",
                                                                            "content": "<built-in function _disabled_torch_dispatch_impl>"
                                                                          },
                                                                          "__dlpack__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__dlpack_device__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {}
                                                                          },
                                                                          "__dict__": {
                                                                            "class": "<class 'getset_descriptor'>",
                                                                            "content": "<attribute '__dict__' of 'Tensor' objects>"
                                                                          },
                                                                          "__weakref__": {
                                                                            "class": "<class 'getset_descriptor'>",
                                                                            "content": "<attribute '__weakref__' of 'Tensor' objects>"
                                                                          },
                                                                          "__doc__": {
                                                                            "class": "<class 'NoneType'>",
                                                                            "content": "cyclic reference: None"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    "__doc__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "Applies a linear transformation to the incoming data: :math:`y = xA^T + b`\n\n    This module supports :ref:`TensorFloat32<tf32_on_ampere>`.\n\n    On certain ROCm devices, when using float16 inputs this module will use :ref:`different precision<fp16_on_mi200>` for backward.\n\n    Args:\n        in_features: size of each input sample\n        out_features: size of each output sample\n        bias: If set to ``False``, the layer will not learn an additive bias.\n            Default: ``True``\n\n    Shape:\n        - Input: :math:`(*, H_{in})` where :math:`*` means any number of\n          dimensions including none and :math:`H_{in} = \\text{in\\_features}`.\n        - Output: :math:`(*, H_{out})` where all but the last dimension\n          are the same shape as the input and :math:`H_{out} = \\text{out\\_features}`.\n\n    Attributes:\n        weight: the learnable weights of the module of shape\n            :math:`(\\text{out\\_features}, \\text{in\\_features})`. The values are\n            initialized from :math:`\\mathcal{U}(-\\sqrt{k}, \\sqrt{k})`, where\n            :math:`k = \\frac{1}{\\text{in\\_features}}`\n        bias:   the learnable bias of the module of shape :math:`(\\text{out\\_features})`.\n                If :attr:`bias` is ``True``, the values are initialized from\n                :math:`\\mathcal{U}(-\\sqrt{k}, \\sqrt{k})` where\n                :math:`k = \\frac{1}{\\text{in\\_features}}`\n\n    Examples::\n\n        >>> m = nn.Linear(20, 30)\n        >>> input = torch.randn(128, 20)\n        >>> output = m(input)\n        >>> print(output.size())\n        torch.Size([128, 30])\n    "
                                                                    },
                                                                    "__constants__": {
                                                                      "class": "<class 'list'>",
                                                                      "content": [
                                                                        "in_features",
                                                                        "out_features"
                                                                      ]
                                                                    },
                                                                    "__init__": {
                                                                      "class": "<class 'function'>",
                                                                      "content": {}
                                                                    },
                                                                    "reset_parameters": {
                                                                      "class": "<class 'function'>",
                                                                      "content": {}
                                                                    },
                                                                    "forward": {
                                                                      "class": "<class 'function'>",
                                                                      "content": {}
                                                                    },
                                                                    "extra_repr": {
                                                                      "class": "<class 'function'>",
                                                                      "content": {}
                                                                    },
                                                                    "__slotnames__": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    }
                                                                  }
                                                                },
                                                                "val": {
                                                                  "fake_device": {
                                                                    "class": "<class 'torch.device'>",
                                                                    "content": "cuda:0"
                                                                  },
                                                                  "fake_mode": {
                                                                    "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                                    "content": {
                                                                      "allow_fallback_kernels": {
                                                                        "class": "<class 'bool'>",
                                                                        "content": "cyclic reference: True"
                                                                      },
                                                                      "fake_tensor_converter": {
                                                                        "class": "<class 'torch._subclasses.fake_tensor.FakeTensorConverter'>",
                                                                        "content": {
                                                                          "meta_converter": {
                                                                            "class": "<class 'torch._subclasses.meta_utils.MetaConverter'>",
                                                                            "content": {
                                                                              "storage_memo": {
                                                                                "class": "<class 'dict'>",
                                                                                "content": {
                                                                                  "<torch.multiprocessing.reductions.StorageWeakRef object at 0x7f52c13cb400>": {},
                                                                                  "<torch.multiprocessing.reductions.StorageWeakRef object at 0x7f52c13f0610>": {},
                                                                                  "<torch.multiprocessing.reductions.StorageWeakRef object at 0x7f52c13f0550>": {}
                                                                                }
                                                                              },
                                                                              "tensor_memo": {
                                                                                "class": "<class 'weakref.WeakValueDictionary'>",
                                                                                "content": {
                                                                                  "<weakref at 0x7f52c13a7740; to 'Tensor' at 0x7f52c1536fc0>": {
                                                                                    "fake_device": {
                                                                                      "class": "<class 'torch.device'>",
                                                                                      "content": "cyclic reference: cuda:0"
                                                                                    },
                                                                                    "fake_mode": {
                                                                                      "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                                                      "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                                                                    },
                                                                                    "constant": {
                                                                                      "class": "<class 'NoneType'>",
                                                                                      "content": "cyclic reference: None"
                                                                                    },
                                                                                    "graph_arg_pos": {
                                                                                      "class": "<class 'list'>",
                                                                                      "content": [
                                                                                        "cyclic reference: 0"
                                                                                      ]
                                                                                    }
                                                                                  }
                                                                                }
                                                                              },
                                                                              "maybe_storages_to_delete": {
                                                                                "class": "<class 'list'>",
                                                                                "content": [
                                                                                  {
                                                                                    "cdata": {
                                                                                      "class": "<class 'int'>",
                                                                                      "content": "137615008"
                                                                                    },
                                                                                    "_free_weak_ref": {
                                                                                      "class": "<class 'method'>",
                                                                                      "content": {}
                                                                                    }
                                                                                  },
                                                                                  {
                                                                                    "cdata": {
                                                                                      "class": "<class 'int'>",
                                                                                      "content": "137969952"
                                                                                    },
                                                                                    "_free_weak_ref": {
                                                                                      "class": "<class 'method'>",
                                                                                      "content": {}
                                                                                    }
                                                                                  }
                                                                                ]
                                                                              },
                                                                              "check_expired_frequency": {
                                                                                "class": "<class 'int'>",
                                                                                "content": "128"
                                                                              },
                                                                              "check_expired_count": {
                                                                                "class": "<class 'int'>",
                                                                                "content": "5"
                                                                              },
                                                                              "hit": {
                                                                                "class": "<class 'int'>",
                                                                                "content": "cyclic reference: 5"
                                                                              },
                                                                              "miss": {
                                                                                "class": "<class 'int'>",
                                                                                "content": "cyclic reference: 0"
                                                                              },
                                                                              "del_hook": {
                                                                                "class": "<class 'NoneType'>",
                                                                                "content": "cyclic reference: None"
                                                                              },
                                                                              "arg_cnt": {
                                                                                "class": "<class 'int'>",
                                                                                "content": "cyclic reference: 5"
                                                                              }
                                                                            }
                                                                          },
                                                                          "constant_storage_mapping": {
                                                                            "class": "<class 'dict'>",
                                                                            "content": {}
                                                                          }
                                                                        }
                                                                      },
                                                                      "allow_meta": {
                                                                        "class": "<class 'bool'>",
                                                                        "content": "cyclic reference: True"
                                                                      },
                                                                      "allow_non_fake_inputs": {
                                                                        "class": "<class 'bool'>",
                                                                        "content": "cyclic reference: False"
                                                                      },
                                                                      "in_kernel_invocation": {
                                                                        "class": "<class 'bool'>",
                                                                        "content": "cyclic reference: False"
                                                                      },
                                                                      "shape_env": {
                                                                        "class": "<class 'NoneType'>",
                                                                        "content": "cyclic reference: None"
                                                                      }
                                                                    }
                                                                  },
                                                                  "constant": {
                                                                    "class": "<class 'NoneType'>",
                                                                    "content": "cyclic reference: None"
                                                                  }
                                                                },
                                                                "tensor_meta": {
                                                                  "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                                                  "content": {
                                                                    "shape": [
                                                                      "32",
                                                                      "64"
                                                                    ],
                                                                    "dtype": "cyclic reference: torch.float32",
                                                                    "requires_grad": "cyclic reference: False",
                                                                    "stride": [
                                                                      "cyclic reference: 1",
                                                                      "cyclic reference: 32"
                                                                    ],
                                                                    "memory_format": "cyclic reference: None",
                                                                    "is_quantized": "cyclic reference: False",
                                                                    "qparams": {}
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "_erased": {
                                                          "class": "<class 'bool'>",
                                                          "content": "cyclic reference: False"
                                                        },
                                                        "_repr_fn": {
                                                          "class": "<class 'NoneType'>",
                                                          "content": "cyclic reference: None"
                                                        },
                                                        "meta": {
                                                          "class": "<class 'dict'>",
                                                          "content": {
                                                            "val": {
                                                              "fake_device": {
                                                                "class": "<class 'torch.device'>",
                                                                "content": "cyclic reference: cuda:0"
                                                              },
                                                              "fake_mode": {
                                                                "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                                "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                                              },
                                                              "constant": {
                                                                "class": "<class 'NoneType'>",
                                                                "content": "cyclic reference: None"
                                                              }
                                                            },
                                                            "tensor_meta": {
                                                              "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                                              "content": {
                                                                "shape": [
                                                                  "8",
                                                                  "cyclic reference: 32"
                                                                ],
                                                                "dtype": "cyclic reference: torch.float32",
                                                                "requires_grad": "cyclic reference: False",
                                                                "stride": [
                                                                  "cyclic reference: 32",
                                                                  "cyclic reference: 1"
                                                                ],
                                                                "memory_format": "torch.contiguous_format",
                                                                "is_quantized": "cyclic reference: False",
                                                                "qparams": {}
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "cyclic reference: permute"
                                                    ]
                                                  },
                                                  "_kwargs": {
                                                    "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                                    "content": {}
                                                  },
                                                  "users": {
                                                    "class": "<class 'dict'>",
                                                    "content": {
                                                      "mul": "cyclic reference: None",
                                                      "mul_1": "cyclic reference: None",
                                                      "output": "cyclic reference: None"
                                                    }
                                                  },
                                                  "type": {
                                                    "class": "<class 'NoneType'>",
                                                    "content": "cyclic reference: None"
                                                  },
                                                  "_prev": {
                                                    "class": "<class 'torch.fx.node.Node'>",
                                                    "content": "cyclic reference: permute"
                                                  },
                                                  "_next": {
                                                    "class": "<class 'torch.fx.node.Node'>",
                                                    "content": "cyclic reference: mul"
                                                  },
                                                  "_erased": {
                                                    "class": "<class 'bool'>",
                                                    "content": "cyclic reference: False"
                                                  },
                                                  "_repr_fn": {
                                                    "class": "<class 'NoneType'>",
                                                    "content": "cyclic reference: None"
                                                  },
                                                  "meta": {
                                                    "class": "<class 'dict'>",
                                                    "content": {
                                                      "stack_trace": "cyclic reference:   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 71, in forward\n    x = self.fc1(x)\n |   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 116, in inference_func\n    return model(inp)\n",
                                                      "nn_module_stack": "cyclic reference: {'model': <class '__main__.MLP'>, 'model_fc1': <class 'torch.nn.modules.linear.Linear'>}",
                                                      "val": {
                                                        "fake_device": {
                                                          "class": "<class 'torch.device'>",
                                                          "content": "cyclic reference: cuda:0"
                                                        },
                                                        "fake_mode": {
                                                          "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                          "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                                        },
                                                        "constant": {
                                                          "class": "<class 'NoneType'>",
                                                          "content": "cyclic reference: None"
                                                        }
                                                      },
                                                      "tensor_meta": {
                                                        "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                                        "content": {
                                                          "shape": [
                                                            "cyclic reference: 8",
                                                            "cyclic reference: 64"
                                                          ],
                                                          "dtype": "cyclic reference: torch.float32",
                                                          "requires_grad": "cyclic reference: False",
                                                          "stride": [
                                                            "cyclic reference: 64",
                                                            "cyclic reference: 1"
                                                          ],
                                                          "memory_format": "cyclic reference: torch.contiguous_format",
                                                          "is_quantized": "cyclic reference: False",
                                                          "qparams": {}
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "0.5"
                                              ]
                                            },
                                            "_kwargs": {
                                              "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                              "content": {}
                                            },
                                            "users": {
                                              "class": "<class 'dict'>",
                                              "content": {
                                                "mul_2": "cyclic reference: None"
                                              }
                                            },
                                            "type": {
                                              "class": "<class 'NoneType'>",
                                              "content": "cyclic reference: None"
                                            },
                                            "_prev": {
                                              "class": "<class 'torch.fx.node.Node'>",
                                              "content": "cyclic reference: addmm"
                                            },
                                            "_next": {
                                              "class": "<class 'torch.fx.node.Node'>",
                                              "content": {
                                                "graph": {
                                                  "class": "<class 'torch.fx.graph.Graph'>",
                                                  "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                                },
                                                "name": {
                                                  "class": "<class 'str'>",
                                                  "content": "mul_1"
                                                },
                                                "op": {
                                                  "class": "<class 'str'>",
                                                  "content": "cyclic reference: call_function"
                                                },
                                                "target": {
                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                  "content": "cyclic reference: aten.mul.Tensor"
                                                },
                                                "_input_nodes": {
                                                  "class": "<class 'dict'>",
                                                  "content": {
                                                    "addmm": "cyclic reference: None"
                                                  }
                                                },
                                                "_args": {
                                                  "class": "<class 'tuple'>",
                                                  "content": [
                                                    "cyclic reference: addmm",
                                                    "0.7071067811865476"
                                                  ]
                                                },
                                                "_kwargs": {
                                                  "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                                  "content": {}
                                                },
                                                "users": {
                                                  "class": "<class 'dict'>",
                                                  "content": {
                                                    "erf": "cyclic reference: None"
                                                  }
                                                },
                                                "type": {
                                                  "class": "<class 'NoneType'>",
                                                  "content": "cyclic reference: None"
                                                },
                                                "_prev": {
                                                  "class": "<class 'torch.fx.node.Node'>",
                                                  "content": "cyclic reference: mul"
                                                },
                                                "_next": {
                                                  "class": "<class 'torch.fx.node.Node'>",
                                                  "content": {
                                                    "graph": {
                                                      "class": "<class 'torch.fx.graph.Graph'>",
                                                      "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                                    },
                                                    "name": {
                                                      "class": "<class 'str'>",
                                                      "content": "erf"
                                                    },
                                                    "op": {
                                                      "class": "<class 'str'>",
                                                      "content": "cyclic reference: call_function"
                                                    },
                                                    "target": {
                                                      "class": "<class 'torch._ops.OpOverload'>",
                                                      "content": {
                                                        "_op": {
                                                          "class": "<class 'builtin_function_or_method'>",
                                                          "content": "<built-in method  of PyCapsule object at 0x7f52cf386ca0>"
                                                        },
                                                        "_op_dk": {
                                                          "class": "<class 'builtin_function_or_method'>",
                                                          "content": "<built-in method  of PyCapsule object at 0x7f52cf386cd0>"
                                                        },
                                                        "_schema": {
                                                          "class": "<class 'torch.FunctionSchema'>",
                                                          "content": "aten::erf(Tensor self) -> Tensor"
                                                        },
                                                        "_overloadpacket": {
                                                          "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                          "content": {
                                                            "_qualified_op_name": {
                                                              "class": "<class 'str'>",
                                                              "content": "aten::erf"
                                                            },
                                                            "__name__": {
                                                              "class": "<class 'str'>",
                                                              "content": "erf"
                                                            },
                                                            "_op": {
                                                              "class": "<class 'builtin_function_or_method'>",
                                                              "content": "<built-in method erf of PyCapsule object at 0x7f52d0ade580>"
                                                            },
                                                            "_overload_names": {
                                                              "class": "<class 'list'>",
                                                              "content": [
                                                                "cyclic reference: ",
                                                                "out",
                                                                "int",
                                                                "float",
                                                                "Scalar"
                                                              ]
                                                            },
                                                            "_dir": {
                                                              "class": "<class 'list'>",
                                                              "content": [
                                                                "cyclic reference: default",
                                                                "cyclic reference: out",
                                                                "cyclic reference: int",
                                                                "cyclic reference: float",
                                                                "cyclic reference: Scalar"
                                                              ]
                                                            },
                                                            "__module__": {
                                                              "class": "<class 'str'>",
                                                              "content": "torch._ops.aten"
                                                            },
                                                            "default": {
                                                              "class": "<class 'torch._ops.OpOverload'>",
                                                              "content": "cyclic reference: aten.erf.default"
                                                            },
                                                            "out": {
                                                              "class": "<class 'torch._ops.OpOverload'>",
                                                              "content": {
                                                                "_op": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386d30>"
                                                                },
                                                                "_op_dk": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386d60>"
                                                                },
                                                                "_schema": {
                                                                  "class": "<class 'torch.FunctionSchema'>",
                                                                  "content": "aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)"
                                                                },
                                                                "_overloadpacket": {
                                                                  "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                  "content": "cyclic reference: aten.erf"
                                                                },
                                                                "_tags": {
                                                                  "class": "<class 'list'>",
                                                                  "content": [
                                                                    "Tag.pointwise"
                                                                  ]
                                                                },
                                                                "_overloadname": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "out"
                                                                },
                                                                "_name": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "aten::erf.out"
                                                                },
                                                                "py_kernels": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {
                                                                    "DispatchKey.Meta": {
                                                                      "__wrapped__": {
                                                                        "class": "<class 'function'>",
                                                                        "content": {}
                                                                      },
                                                                      "__signature__": {
                                                                        "class": "<class 'inspect.Signature'>",
                                                                        "content": "(a: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor"
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                "__name__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "erf.out"
                                                                },
                                                                "python_key_mode_table": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__module__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: torch._ops.aten"
                                                                },
                                                                "__qualname__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: aten::erf.out"
                                                                },
                                                                "__annotations__": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "_dispatch_cache": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "is_view": {
                                                                  "class": "<class 'bool'>",
                                                                  "content": "cyclic reference: False"
                                                                }
                                                              }
                                                            },
                                                            "int": {
                                                              "class": "<class 'torch._ops.OpOverload'>",
                                                              "content": {
                                                                "_op": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386dc0>"
                                                                },
                                                                "_op_dk": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386df0>"
                                                                },
                                                                "_schema": {
                                                                  "class": "<class 'torch.FunctionSchema'>",
                                                                  "content": "aten::erf.int(int a) -> float"
                                                                },
                                                                "_overloadpacket": {
                                                                  "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                  "content": "cyclic reference: aten.erf"
                                                                },
                                                                "_tags": {
                                                                  "class": "<class 'list'>",
                                                                  "content": []
                                                                },
                                                                "_overloadname": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "int"
                                                                },
                                                                "_name": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "aten::erf.int"
                                                                },
                                                                "py_kernels": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__name__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "erf.int"
                                                                },
                                                                "python_key_mode_table": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__module__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: torch._ops.aten"
                                                                },
                                                                "__qualname__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: aten::erf.int"
                                                                },
                                                                "__annotations__": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "_dispatch_cache": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "is_view": {
                                                                  "class": "<class 'bool'>",
                                                                  "content": "cyclic reference: False"
                                                                }
                                                              }
                                                            },
                                                            "float": {
                                                              "class": "<class 'torch._ops.OpOverload'>",
                                                              "content": {
                                                                "_op": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386e50>"
                                                                },
                                                                "_op_dk": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386e80>"
                                                                },
                                                                "_schema": {
                                                                  "class": "<class 'torch.FunctionSchema'>",
                                                                  "content": "aten::erf.float(float a) -> float"
                                                                },
                                                                "_overloadpacket": {
                                                                  "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                  "content": "cyclic reference: aten.erf"
                                                                },
                                                                "_tags": {
                                                                  "class": "<class 'list'>",
                                                                  "content": []
                                                                },
                                                                "_overloadname": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "float"
                                                                },
                                                                "_name": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "aten::erf.float"
                                                                },
                                                                "py_kernels": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__name__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "erf.float"
                                                                },
                                                                "python_key_mode_table": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__module__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: torch._ops.aten"
                                                                },
                                                                "__qualname__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: aten::erf.float"
                                                                },
                                                                "__annotations__": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "_dispatch_cache": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "is_view": {
                                                                  "class": "<class 'bool'>",
                                                                  "content": "cyclic reference: False"
                                                                }
                                                              }
                                                            },
                                                            "Scalar": {
                                                              "class": "<class 'torch._ops.OpOverload'>",
                                                              "content": {
                                                                "_op": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386ee0>"
                                                                },
                                                                "_op_dk": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method  of PyCapsule object at 0x7f52cf386f10>"
                                                                },
                                                                "_schema": {
                                                                  "class": "<class 'torch.FunctionSchema'>",
                                                                  "content": "aten::erf.Scalar(Scalar a) -> Scalar"
                                                                },
                                                                "_overloadpacket": {
                                                                  "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                  "content": "cyclic reference: aten.erf"
                                                                },
                                                                "_tags": {
                                                                  "class": "<class 'list'>",
                                                                  "content": []
                                                                },
                                                                "_overloadname": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "Scalar"
                                                                },
                                                                "_name": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "aten::erf.Scalar"
                                                                },
                                                                "py_kernels": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__name__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "erf.Scalar"
                                                                },
                                                                "python_key_mode_table": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "__module__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: torch._ops.aten"
                                                                },
                                                                "__qualname__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "cyclic reference: aten::erf.Scalar"
                                                                },
                                                                "__annotations__": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "_dispatch_cache": {
                                                                  "class": "<class 'dict'>",
                                                                  "content": {}
                                                                },
                                                                "is_view": {
                                                                  "class": "<class 'bool'>",
                                                                  "content": "cyclic reference: False"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "_tags": {
                                                          "class": "<class 'list'>",
                                                          "content": [
                                                            "Tag.pointwise",
                                                            "Tag.core"
                                                          ]
                                                        },
                                                        "_overloadname": {
                                                          "class": "<class 'str'>",
                                                          "content": "cyclic reference: default"
                                                        },
                                                        "_name": {
                                                          "class": "<class 'str'>",
                                                          "content": "aten::erf"
                                                        },
                                                        "py_kernels": {
                                                          "class": "<class 'dict'>",
                                                          "content": {
                                                            "DispatchKey.Meta": "cyclic reference: <function erf at 0x7f52cf37a050>"
                                                          }
                                                        },
                                                        "__name__": {
                                                          "class": "<class 'str'>",
                                                          "content": "erf.default"
                                                        },
                                                        "python_key_mode_table": {
                                                          "class": "<class 'dict'>",
                                                          "content": {}
                                                        },
                                                        "__module__": {
                                                          "class": "<class 'str'>",
                                                          "content": "cyclic reference: torch._ops.aten"
                                                        },
                                                        "__qualname__": {
                                                          "class": "<class 'str'>",
                                                          "content": "cyclic reference: aten::erf"
                                                        },
                                                        "__annotations__": {
                                                          "class": "<class 'dict'>",
                                                          "content": {}
                                                        },
                                                        "_dispatch_cache": {
                                                          "class": "<class 'dict'>",
                                                          "content": {
                                                            "DispatchKey.Meta": "cyclic reference: <function erf at 0x7f52cf37a050>",
                                                            "DispatchKey.Python": "DispatchKey.Python"
                                                          }
                                                        },
                                                        "is_view": {
                                                          "class": "<class 'bool'>",
                                                          "content": "cyclic reference: False"
                                                        }
                                                      }
                                                    },
                                                    "_input_nodes": {
                                                      "class": "<class 'dict'>",
                                                      "content": {
                                                        "mul_1": "cyclic reference: None"
                                                      }
                                                    },
                                                    "_args": {
                                                      "class": "<class 'tuple'>",
                                                      "content": [
                                                        "cyclic reference: mul_1"
                                                      ]
                                                    },
                                                    "_kwargs": {
                                                      "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                                      "content": {}
                                                    },
                                                    "users": {
                                                      "class": "<class 'dict'>",
                                                      "content": {
                                                        "add": "cyclic reference: None"
                                                      }
                                                    },
                                                    "type": {
                                                      "class": "<class 'NoneType'>",
                                                      "content": "cyclic reference: None"
                                                    },
                                                    "_prev": {
                                                      "class": "<class 'torch.fx.node.Node'>",
                                                      "content": "cyclic reference: mul_1"
                                                    },
                                                    "_next": {
                                                      "class": "<class 'torch.fx.node.Node'>",
                                                      "content": {
                                                        "graph": {
                                                          "class": "<class 'torch.fx.graph.Graph'>",
                                                          "content": "skip: graph():\n    %primals_1 : [#users=1] = placeholder[target=primals_1]\n    %primals_2 : [#users=1] = placeholder[target=primals_2]\n    %primals_3 : [#users=2] = placeholder[target=primals_3]\n    %permute : [#users=1] = call_function[target=torch.ops.aten.permute.default](args = (%primals_1, [1, 0]), kwargs = {})\n    %addmm : [#users=3] = call_function[target=torch.ops.aten.addmm.default](args = (%primals_2, %primals_3, %permute), kwargs = {})\n    %mul : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.5), kwargs = {})\n    %mul_1 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%addmm, 0.7071067811865476), kwargs = {})\n    %erf : [#users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})\n    %add : [#users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})\n    %mul_2 : [#users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})\n    return [mul_2, primals_3, addmm]"
                                                        },
                                                        "name": {
                                                          "class": "<class 'str'>",
                                                          "content": "add"
                                                        },
                                                        "op": {
                                                          "class": "<class 'str'>",
                                                          "content": "cyclic reference: call_function"
                                                        },
                                                        "target": {
                                                          "class": "<class 'torch._ops.OpOverload'>",
                                                          "content": {
                                                            "_op": {
                                                              "class": "<class 'builtin_function_or_method'>",
                                                              "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd080>"
                                                            },
                                                            "_op_dk": {
                                                              "class": "<class 'builtin_function_or_method'>",
                                                              "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd0b0>"
                                                            },
                                                            "_schema": {
                                                              "class": "<class 'torch.FunctionSchema'>",
                                                              "content": "aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor"
                                                            },
                                                            "_overloadpacket": {
                                                              "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                              "content": {
                                                                "_qualified_op_name": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "aten::add"
                                                                },
                                                                "__name__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "add"
                                                                },
                                                                "_op": {
                                                                  "class": "<class 'builtin_function_or_method'>",
                                                                  "content": "<built-in method add of PyCapsule object at 0x7f52d0a87390>"
                                                                },
                                                                "_overload_names": {
                                                                  "class": "<class 'list'>",
                                                                  "content": [
                                                                    "Tensor",
                                                                    "Scalar",
                                                                    "out",
                                                                    "Scalar_out",
                                                                    "t",
                                                                    "str",
                                                                    "int",
                                                                    "complex",
                                                                    "float",
                                                                    "int_complex",
                                                                    "complex_int",
                                                                    "float_complex",
                                                                    "complex_float",
                                                                    "int_float",
                                                                    "float_int",
                                                                    "cyclic reference: "
                                                                  ]
                                                                },
                                                                "_dir": {
                                                                  "class": "<class 'list'>",
                                                                  "content": [
                                                                    "cyclic reference: Tensor",
                                                                    "cyclic reference: Scalar",
                                                                    "cyclic reference: out",
                                                                    "cyclic reference: Scalar_out",
                                                                    "cyclic reference: t",
                                                                    "cyclic reference: str",
                                                                    "cyclic reference: int",
                                                                    "cyclic reference: complex",
                                                                    "cyclic reference: float",
                                                                    "cyclic reference: int_complex",
                                                                    "cyclic reference: complex_int",
                                                                    "cyclic reference: float_complex",
                                                                    "cyclic reference: complex_float",
                                                                    "cyclic reference: int_float",
                                                                    "cyclic reference: float_int",
                                                                    "cyclic reference: default"
                                                                  ]
                                                                },
                                                                "__module__": {
                                                                  "class": "<class 'str'>",
                                                                  "content": "torch._ops.aten"
                                                                },
                                                                "Tensor": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": "cyclic reference: aten.add.Tensor"
                                                                },
                                                                "Scalar": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd110>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd140>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": [
                                                                        "Tag.pointwise",
                                                                        "Tag.core"
                                                                      ]
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "Scalar"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.Scalar"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {
                                                                        "DispatchKey.Meta": {
                                                                          "__wrapped__": {
                                                                            "class": "<class 'function'>",
                                                                            "content": {
                                                                              "__wrapped__": {
                                                                                "class": "<class 'function'>",
                                                                                "content": {}
                                                                              },
                                                                              "__signature__": {
                                                                                "class": "<class 'inspect.Signature'>",
                                                                                "content": "(a: Union[torch.Tensor, bool, int, float, complex], b: Union[torch.Tensor, bool, int, float, complex], *, alpha: Union[bool, int, float, complex, NoneType] = None)"
                                                                              }
                                                                            }
                                                                          },
                                                                          "__signature__": {
                                                                            "class": "<class 'inspect.Signature'>",
                                                                            "content": "(a: Union[torch.Tensor, bool, int, float, complex], b: Union[torch.Tensor, bool, int, float, complex], *, alpha: Union[bool, int, float, complex, NoneType] = None, out: torch.Tensor = None) -> torch.Tensor"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.Scalar"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.Scalar"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "out": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd1a0>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd1d0>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": [
                                                                        "Tag.pointwise"
                                                                      ]
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "out"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.out"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {
                                                                        "DispatchKey.Meta": "cyclic reference: <function add at 0x7f52cf1d1000>"
                                                                      }
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.out"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.out"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "Scalar_out": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd230>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd260>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.Scalar_out(Tensor self, Scalar other, Scalar alpha=1, *, Tensor(a!) out) -> Tensor(a!)"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": [
                                                                        "Tag.generated"
                                                                      ]
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "Scalar_out"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.Scalar_out"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {
                                                                        "DispatchKey.Meta": "cyclic reference: <function add at 0x7f52cf1d1000>"
                                                                      }
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.Scalar_out"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.Scalar_out"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "t": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd2c0>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd2f0>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.t(t[] a, t[] b) -> t[]"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: t"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.t"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.t"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.t"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "str": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd350>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd380>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.str(str a, str b) -> str"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "str"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.str"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.str"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.str"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "int": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd3e0>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd410>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.int(int a, int b) -> int"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "int"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.int"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.int"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.int"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "complex": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd470>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd4a0>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.complex(complex a, complex b) -> complex"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "complex"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.complex"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.complex"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.complex"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "float": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd500>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd530>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.float(float a, float b) -> float"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "float"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.float"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.float"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.float"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "int_complex": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd590>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd5c0>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.int_complex(int a, complex b) -> complex"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "int_complex"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.int_complex"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.int_complex"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.int_complex"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "complex_int": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd620>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd650>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.complex_int(complex a, int b) -> complex"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "complex_int"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.complex_int"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.complex_int"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.complex_int"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "float_complex": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd6b0>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd6e0>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.float_complex(float a, complex b) -> complex"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "float_complex"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.float_complex"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.float_complex"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.float_complex"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "complex_float": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd740>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd770>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.complex_float(complex a, float b) -> complex"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "complex_float"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.complex_float"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.complex_float"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.complex_float"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "int_float": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd7d0>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd800>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.int_float(int a, float b) -> float"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "int_float"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.int_float"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.int_float"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.int_float"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "float_int": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd860>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd890>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add.float_int(float a, int b) -> float"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "float_int"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add.float_int"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.float_int"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add.float_int"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                },
                                                                "default": {
                                                                  "class": "<class 'torch._ops.OpOverload'>",
                                                                  "content": {
                                                                    "_op": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd8f0>"
                                                                    },
                                                                    "_op_dk": {
                                                                      "class": "<class 'builtin_function_or_method'>",
                                                                      "content": "<built-in method  of PyCapsule object at 0x7f52cf1dd920>"
                                                                    },
                                                                    "_schema": {
                                                                      "class": "<class 'torch.FunctionSchema'>",
                                                                      "content": "aten::add(Scalar a, Scalar b) -> Scalar"
                                                                    },
                                                                    "_overloadpacket": {
                                                                      "class": "<class 'torch._ops.OpOverloadPacket'>",
                                                                      "content": "cyclic reference: aten.add"
                                                                    },
                                                                    "_tags": {
                                                                      "class": "<class 'list'>",
                                                                      "content": []
                                                                    },
                                                                    "_overloadname": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: default"
                                                                    },
                                                                    "_name": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "aten::add"
                                                                    },
                                                                    "py_kernels": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__name__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "add.default"
                                                                    },
                                                                    "python_key_mode_table": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "__module__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: torch._ops.aten"
                                                                    },
                                                                    "__qualname__": {
                                                                      "class": "<class 'str'>",
                                                                      "content": "cyclic reference: aten::add"
                                                                    },
                                                                    "__annotations__": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "_dispatch_cache": {
                                                                      "class": "<class 'dict'>",
                                                                      "content": {}
                                                                    },
                                                                    "is_view": {
                                                                      "class": "<class 'bool'>",
                                                                      "content": "cyclic reference: False"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "_tags": {
                                                              "class": "<class 'list'>",
                                                              "content": [
                                                                "Tag.pointwise",
                                                                "Tag.core"
                                                              ]
                                                            },
                                                            "_overloadname": {
                                                              "class": "<class 'str'>",
                                                              "content": "Tensor"
                                                            },
                                                            "_name": {
                                                              "class": "<class 'str'>",
                                                              "content": "aten::add.Tensor"
                                                            },
                                                            "py_kernels": {
                                                              "class": "<class 'dict'>",
                                                              "content": {
                                                                "DispatchKey.Meta": "cyclic reference: <function add at 0x7f52cf1d1000>"
                                                              }
                                                            },
                                                            "__name__": {
                                                              "class": "<class 'str'>",
                                                              "content": "add.Tensor"
                                                            },
                                                            "python_key_mode_table": {
                                                              "class": "<class 'dict'>",
                                                              "content": {}
                                                            },
                                                            "__module__": {
                                                              "class": "<class 'str'>",
                                                              "content": "cyclic reference: torch._ops.aten"
                                                            },
                                                            "__qualname__": {
                                                              "class": "<class 'str'>",
                                                              "content": "cyclic reference: aten::add.Tensor"
                                                            },
                                                            "__annotations__": {
                                                              "class": "<class 'dict'>",
                                                              "content": {}
                                                            },
                                                            "_dispatch_cache": {
                                                              "class": "<class 'dict'>",
                                                              "content": {
                                                                "DispatchKey.Python": "DispatchKey.Python",
                                                                "DispatchKey.Meta": "cyclic reference: <function add at 0x7f52cf1d1000>"
                                                              }
                                                            },
                                                            "is_view": {
                                                              "class": "<class 'bool'>",
                                                              "content": "cyclic reference: False"
                                                            }
                                                          }
                                                        },
                                                        "_input_nodes": {
                                                          "class": "<class 'dict'>",
                                                          "content": {
                                                            "erf": "cyclic reference: None"
                                                          }
                                                        },
                                                        "_args": {
                                                          "class": "<class 'tuple'>",
                                                          "content": [
                                                            "cyclic reference: erf",
                                                            "cyclic reference: 1"
                                                          ]
                                                        },
                                                        "_kwargs": {
                                                          "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                                          "content": {}
                                                        },
                                                        "users": {
                                                          "class": "<class 'dict'>",
                                                          "content": {
                                                            "mul_2": "cyclic reference: None"
                                                          }
                                                        },
                                                        "type": {
                                                          "class": "<class 'NoneType'>",
                                                          "content": "cyclic reference: None"
                                                        },
                                                        "_prev": {
                                                          "class": "<class 'torch.fx.node.Node'>",
                                                          "content": "cyclic reference: erf"
                                                        },
                                                        "_next": {
                                                          "class": "<class 'torch.fx.node.Node'>",
                                                          "content": "cyclic reference: mul_2"
                                                        },
                                                        "_erased": {
                                                          "class": "<class 'bool'>",
                                                          "content": "cyclic reference: False"
                                                        },
                                                        "_repr_fn": {
                                                          "class": "<class 'NoneType'>",
                                                          "content": "cyclic reference: None"
                                                        },
                                                        "meta": {
                                                          "class": "<class 'dict'>",
                                                          "content": {
                                                            "stack_trace": "  File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 72, in forward\n    x = torch.nn.functional.gelu(x)\n |   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 116, in inference_func\n    return model(inp)\n",
                                                            "nn_module_stack": {
                                                              "model": "cyclic reference: <class '__main__.MLP'>"
                                                            },
                                                            "source_fn": "<built-in function gelu>",
                                                            "val": {
                                                              "fake_device": {
                                                                "class": "<class 'torch.device'>",
                                                                "content": "cyclic reference: cuda:0"
                                                              },
                                                              "fake_mode": {
                                                                "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                                "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                                              },
                                                              "constant": {
                                                                "class": "<class 'NoneType'>",
                                                                "content": "cyclic reference: None"
                                                              }
                                                            },
                                                            "tensor_meta": {
                                                              "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                                              "content": {
                                                                "shape": [
                                                                  "cyclic reference: 8",
                                                                  "cyclic reference: 64"
                                                                ],
                                                                "dtype": "cyclic reference: torch.float32",
                                                                "requires_grad": "cyclic reference: False",
                                                                "stride": [
                                                                  "cyclic reference: 64",
                                                                  "cyclic reference: 1"
                                                                ],
                                                                "memory_format": "cyclic reference: torch.contiguous_format",
                                                                "is_quantized": "cyclic reference: False",
                                                                "qparams": {}
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "_erased": {
                                                      "class": "<class 'bool'>",
                                                      "content": "cyclic reference: False"
                                                    },
                                                    "_repr_fn": {
                                                      "class": "<class 'NoneType'>",
                                                      "content": "cyclic reference: None"
                                                    },
                                                    "meta": {
                                                      "class": "<class 'dict'>",
                                                      "content": {
                                                        "stack_trace": "cyclic reference:   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 72, in forward\n    x = torch.nn.functional.gelu(x)\n |   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 116, in inference_func\n    return model(inp)\n",
                                                        "nn_module_stack": "cyclic reference: {'model': <class '__main__.MLP'>}",
                                                        "source_fn": "cyclic reference: <built-in function gelu>",
                                                        "val": {
                                                          "fake_device": {
                                                            "class": "<class 'torch.device'>",
                                                            "content": "cyclic reference: cuda:0"
                                                          },
                                                          "fake_mode": {
                                                            "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                            "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                                          },
                                                          "constant": {
                                                            "class": "<class 'NoneType'>",
                                                            "content": "cyclic reference: None"
                                                          }
                                                        },
                                                        "tensor_meta": {
                                                          "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                                          "content": {
                                                            "shape": [
                                                              "cyclic reference: 8",
                                                              "cyclic reference: 64"
                                                            ],
                                                            "dtype": "cyclic reference: torch.float32",
                                                            "requires_grad": "cyclic reference: False",
                                                            "stride": [
                                                              "cyclic reference: 64",
                                                              "cyclic reference: 1"
                                                            ],
                                                            "memory_format": "cyclic reference: torch.contiguous_format",
                                                            "is_quantized": "cyclic reference: False",
                                                            "qparams": {}
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "_erased": {
                                                  "class": "<class 'bool'>",
                                                  "content": "cyclic reference: False"
                                                },
                                                "_repr_fn": {
                                                  "class": "<class 'NoneType'>",
                                                  "content": "cyclic reference: None"
                                                },
                                                "meta": {
                                                  "class": "<class 'dict'>",
                                                  "content": {
                                                    "stack_trace": "cyclic reference:   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 72, in forward\n    x = torch.nn.functional.gelu(x)\n |   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 116, in inference_func\n    return model(inp)\n",
                                                    "nn_module_stack": "cyclic reference: {'model': <class '__main__.MLP'>}",
                                                    "source_fn": "cyclic reference: <built-in function gelu>",
                                                    "val": {
                                                      "fake_device": {
                                                        "class": "<class 'torch.device'>",
                                                        "content": "cyclic reference: cuda:0"
                                                      },
                                                      "fake_mode": {
                                                        "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                        "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                                      },
                                                      "constant": {
                                                        "class": "<class 'NoneType'>",
                                                        "content": "cyclic reference: None"
                                                      }
                                                    },
                                                    "tensor_meta": {
                                                      "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                                      "content": {
                                                        "shape": [
                                                          "cyclic reference: 8",
                                                          "cyclic reference: 64"
                                                        ],
                                                        "dtype": "cyclic reference: torch.float32",
                                                        "requires_grad": "cyclic reference: False",
                                                        "stride": [
                                                          "cyclic reference: 64",
                                                          "cyclic reference: 1"
                                                        ],
                                                        "memory_format": "cyclic reference: torch.contiguous_format",
                                                        "is_quantized": "cyclic reference: False",
                                                        "qparams": {}
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "_erased": {
                                              "class": "<class 'bool'>",
                                              "content": "cyclic reference: False"
                                            },
                                            "_repr_fn": {
                                              "class": "<class 'NoneType'>",
                                              "content": "cyclic reference: None"
                                            },
                                            "meta": {
                                              "class": "<class 'dict'>",
                                              "content": {
                                                "stack_trace": "cyclic reference:   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 72, in forward\n    x = torch.nn.functional.gelu(x)\n |   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 116, in inference_func\n    return model(inp)\n",
                                                "nn_module_stack": "cyclic reference: {'model': <class '__main__.MLP'>}",
                                                "source_fn": "cyclic reference: <built-in function gelu>",
                                                "val": {
                                                  "fake_device": {
                                                    "class": "<class 'torch.device'>",
                                                    "content": "cyclic reference: cuda:0"
                                                  },
                                                  "fake_mode": {
                                                    "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                                    "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                                  },
                                                  "constant": {
                                                    "class": "<class 'NoneType'>",
                                                    "content": "cyclic reference: None"
                                                  }
                                                },
                                                "tensor_meta": {
                                                  "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                                  "content": {
                                                    "shape": [
                                                      "cyclic reference: 8",
                                                      "cyclic reference: 64"
                                                    ],
                                                    "dtype": "cyclic reference: torch.float32",
                                                    "requires_grad": "cyclic reference: False",
                                                    "stride": [
                                                      "cyclic reference: 64",
                                                      "cyclic reference: 1"
                                                    ],
                                                    "memory_format": "cyclic reference: torch.contiguous_format",
                                                    "is_quantized": "cyclic reference: False",
                                                    "qparams": {}
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "cyclic reference: add"
                                        ]
                                      },
                                      "_kwargs": {
                                        "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                        "content": {}
                                      },
                                      "users": {
                                        "class": "<class 'dict'>",
                                        "content": {
                                          "output": "cyclic reference: None"
                                        }
                                      },
                                      "type": {
                                        "class": "<class 'NoneType'>",
                                        "content": "cyclic reference: None"
                                      },
                                      "_prev": {
                                        "class": "<class 'torch.fx.node.Node'>",
                                        "content": "cyclic reference: add"
                                      },
                                      "_next": {
                                        "class": "<class 'torch.fx.node.Node'>",
                                        "content": "cyclic reference: output"
                                      },
                                      "_erased": {
                                        "class": "<class 'bool'>",
                                        "content": "cyclic reference: False"
                                      },
                                      "_repr_fn": {
                                        "class": "<class 'NoneType'>",
                                        "content": "cyclic reference: None"
                                      },
                                      "meta": {
                                        "class": "<class 'dict'>",
                                        "content": {
                                          "stack_trace": "cyclic reference:   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 72, in forward\n    x = torch.nn.functional.gelu(x)\n |   File \"/home/xmo/workspace/fijit-sys/torch-examples/resnet.py\", line 116, in inference_func\n    return model(inp)\n",
                                          "nn_module_stack": "cyclic reference: {'model': <class '__main__.MLP'>}",
                                          "source_fn": "cyclic reference: <built-in function gelu>",
                                          "val": {
                                            "fake_device": {
                                              "class": "<class 'torch.device'>",
                                              "content": "cyclic reference: cuda:0"
                                            },
                                            "fake_mode": {
                                              "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                                              "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                                            },
                                            "constant": {
                                              "class": "<class 'NoneType'>",
                                              "content": "cyclic reference: None"
                                            }
                                          },
                                          "tensor_meta": {
                                            "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                                            "content": {
                                              "shape": [
                                                "cyclic reference: 8",
                                                "cyclic reference: 64"
                                              ],
                                              "dtype": "cyclic reference: torch.float32",
                                              "requires_grad": "cyclic reference: False",
                                              "stride": [
                                                "cyclic reference: 64",
                                                "cyclic reference: 1"
                                              ],
                                              "memory_format": "cyclic reference: torch.contiguous_format",
                                              "is_quantized": "cyclic reference: False",
                                              "qparams": {}
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "cyclic reference: primals_3",
                                    "cyclic reference: addmm"
                                  ]
                                ]
                              },
                              "_kwargs": {
                                "class": "<class 'torch.fx.immutable_collections.immutable_dict'>",
                                "content": {}
                              },
                              "users": {
                                "class": "<class 'dict'>",
                                "content": {}
                              },
                              "type": {
                                "class": "<class 'NoneType'>",
                                "content": "cyclic reference: None"
                              },
                              "_prev": {
                                "class": "<class 'torch.fx.node.Node'>",
                                "content": "cyclic reference: mul_2"
                              },
                              "_next": {
                                "class": "<class 'torch.fx.node.Node'>",
                                "content": "cyclic reference: "
                              },
                              "_erased": {
                                "class": "<class 'bool'>",
                                "content": "cyclic reference: False"
                              },
                              "_repr_fn": {
                                "class": "<class 'NoneType'>",
                                "content": "cyclic reference: None"
                              },
                              "meta": {
                                "class": "<class 'dict'>",
                                "content": {}
                              }
                            }
                          },
                          "_next": {
                            "class": "<class 'torch.fx.node.Node'>",
                            "content": "cyclic reference: primals_1"
                          },
                          "_erased": {
                            "class": "<class 'bool'>",
                            "content": "cyclic reference: False"
                          },
                          "_repr_fn": {
                            "class": "<class 'NoneType'>",
                            "content": "cyclic reference: None"
                          },
                          "meta": {
                            "class": "<class 'dict'>",
                            "content": {}
                          }
                        }
                      },
                      "_next": {
                        "class": "<class 'torch.fx.node.Node'>",
                        "content": "cyclic reference: primals_2"
                      },
                      "_erased": {
                        "class": "<class 'bool'>",
                        "content": "cyclic reference: False"
                      },
                      "_repr_fn": {
                        "class": "<class 'NoneType'>",
                        "content": "cyclic reference: None"
                      },
                      "meta": {
                        "class": "<class 'dict'>",
                        "content": {
                          "val": {
                            "fake_device": {
                              "class": "<class 'torch.device'>",
                              "content": "cyclic reference: cuda:0"
                            },
                            "fake_mode": {
                              "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                              "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                            },
                            "constant": {
                              "class": "<class 'NoneType'>",
                              "content": "cyclic reference: None"
                            }
                          },
                          "tensor_meta": {
                            "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                            "content": {
                              "shape": [
                                "cyclic reference: 64",
                                "cyclic reference: 32"
                              ],
                              "dtype": "cyclic reference: torch.float32",
                              "requires_grad": "cyclic reference: True",
                              "stride": [
                                "cyclic reference: 32",
                                "cyclic reference: 1"
                              ],
                              "memory_format": "cyclic reference: torch.contiguous_format",
                              "is_quantized": "cyclic reference: False",
                              "qparams": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "_next": {
                    "class": "<class 'torch.fx.node.Node'>",
                    "content": "cyclic reference: primals_3"
                  },
                  "_erased": {
                    "class": "<class 'bool'>",
                    "content": "cyclic reference: False"
                  },
                  "_repr_fn": {
                    "class": "<class 'NoneType'>",
                    "content": "cyclic reference: None"
                  },
                  "meta": {
                    "class": "<class 'dict'>",
                    "content": {
                      "val": {
                        "fake_device": {
                          "class": "<class 'torch.device'>",
                          "content": "cyclic reference: cuda:0"
                        },
                        "fake_mode": {
                          "class": "<class 'torch._subclasses.fake_tensor.FakeTensorMode'>",
                          "content": "cyclic reference: <torch._subclasses.fake_tensor.FakeTensorMode object at 0x7f52c13caaa0>"
                        },
                        "constant": {
                          "class": "<class 'NoneType'>",
                          "content": "cyclic reference: None"
                        }
                      },
                      "tensor_meta": {
                        "namedtuple": "<class 'torch.fx.passes.shape_prop.TensorMetadata'>",
                        "content": {
                          "shape": [
                            "cyclic reference: 64"
                          ],
                          "dtype": "cyclic reference: torch.float32",
                          "requires_grad": "cyclic reference: True",
                          "stride": [
                            "cyclic reference: 1"
                          ],
                          "memory_format": "cyclic reference: torch.contiguous_format",
                          "is_quantized": "cyclic reference: False",
                          "qparams": {}
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "dataclass": "<class 'torch._inductor.ir.InputBuffer'>",
            "content": {
              "name": "cyclic reference: primals_3",
              "layout": {
                "dataclass": "<class 'torch._inductor.ir.FixedLayout'>",
                "content": {
                  "device": "cyclic reference: cuda:0",
                  "dtype": "cyclic reference: torch.float32",
                  "size": [
                    "cyclic reference: 8",
                    "32"
                  ],
                  "_stride": [
                    "cyclic reference: 32",
                    "cyclic reference: 1"
                  ],
                  "offset": "cyclic reference: 0"
                }
              },
              "origins": [
                "cyclic reference: primals_3"
              ]
            }
          },
          {
            "dataclass": "<class 'torch._inductor.ir.ReinterpretView'>",
            "content": {
              "data": {
                "dataclass": "<class 'torch._inductor.ir.StorageBox'>",
                "content": {
                  "data": {
                    "dataclass": "<class 'torch._inductor.ir.InputBuffer'>",
                    "content": {
                      "name": "cyclic reference: primals_1",
                      "layout": {
                        "dataclass": "<class 'torch._inductor.ir.FixedLayout'>",
                        "content": {
                          "device": "cyclic reference: cuda:0",
                          "dtype": "cyclic reference: torch.float32",
                          "size": [
                            "cyclic reference: 64",
                            "cyclic reference: 32"
                          ],
                          "_stride": [
                            "cyclic reference: 32",
                            "cyclic reference: 1"
                          ],
                          "offset": "cyclic reference: 0"
                        }
                      },
                      "origins": [
                        "cyclic reference: primals_1"
                      ]
                    }
                  },
                  "origins": [
                    "cyclic reference: primals_1"
                  ]
                }
              },
              "layout": {
                "dataclass": "<class 'torch._inductor.ir.FixedLayout'>",
                "content": {
                  "device": "cyclic reference: cuda:0",
                  "dtype": "cyclic reference: torch.float32",
                  "size": [
                    "cyclic reference: 32",
                    "cyclic reference: 64"
                  ],
                  "_stride": [
                    "cyclic reference: 1",
                    "cyclic reference: 32"
                  ],
                  "offset": "cyclic reference: 0"
                }
              }
            }
          }
        ],
        "constant_args": [],
        "kwargs": {
          "alpha": "cyclic reference: 1",
          "beta": "cyclic reference: 1"
        },
        "output_view": "cyclic reference: None",
        "origins": [
          "cyclic reference: permute",
          "cyclic reference: primals_2",
          "cyclic reference: addmm",
          "cyclic reference: primals_1",
          "cyclic reference: primals_3"
        ],
        "kernel": "extern_kernels.addmm",
        "cpp_kernel": "at::addmm_out"
      }
    }
  },
  "users": {
    "class": "<class 'list'>",
    "content": [
      {
        "dataclass": "<class 'torch._inductor.scheduler.NodeUser'>",
        "content": {
          "node": {
            "scheduler": {
              "class": "<class 'torch._inductor.scheduler.Scheduler'>",
              "content": "skip: <torch._inductor.scheduler.Scheduler object at 0x7f52cff7c040>"
            },
            "node": {
              "class": "<class 'torch._inductor.ir.ComputedBuffer'>",
              "content": {
                "dataclass": "<class 'torch._inductor.ir.ComputedBuffer'>",
                "content": {
                  "name": "buf1",
                  "layout": {
                    "dataclass": "<class 'torch._inductor.ir.FixedLayout'>",
                    "content": {
                      "device": "cyclic reference: cuda:0",
                      "dtype": "cyclic reference: torch.float32",
                      "size": [
                        "cyclic reference: 8",
                        "cyclic reference: 64"
                      ],
                      "_stride": [
                        "cyclic reference: 64",
                        "cyclic reference: 1"
                      ],
                      "offset": "cyclic reference: 0"
                    }
                  },
                  "data": {
                    "dataclass": "<class 'torch._inductor.ir.Pointwise'>",
                    "content": {
                      "device": "cyclic reference: cuda:0",
                      "dtype": "cyclic reference: torch.float32",
                      "inner_fn": {},
                      "ranges": "cyclic reference: [8, 64]",
                      "origins": [
                        "cyclic reference: mul_2"
                      ],
                      "__inner_fn_str_cache": "tmp0 = load(buf0, i1 + 64 * i0)\ntmp1 = constant(0.5, torch.float32)\ntmp2 = tmp0 * tmp1\ntmp3 = load(buf0, i1 + 64 * i0)\ntmp4 = constant(0.7071067811865476, torch.float32)\ntmp5 = tmp3 * tmp4\ntmp6 = erf(tmp5)\ntmp7 = constant(1, torch.float32)\ntmp8 = tmp6 + tmp7\ntmp9 = tmp2 * tmp8\nreturn tmp9\n"
                    }
                  },
                  "origins": [
                    "cyclic reference: mul_2"
                  ],
                  "__get_read_writes_cache": {
                    "dataclass": "<class 'torch._inductor.dependencies.ReadWrites'>",
                    "content": {
                      "reads": [
                        {
                          "namedtuple": "<class 'torch._inductor.dependencies.MemoryDep'>",
                          "content": {
                            "name": "cyclic reference: buf0",
                            "index": "64*d0 + d1",
                            "size": [
                              "cyclic reference: 8",
                              "cyclic reference: 64"
                            ]
                          }
                        }
                      ],
                      "writes": [
                        {
                          "namedtuple": "<class 'torch._inductor.dependencies.MemoryDep'>",
                          "content": {
                            "name": "cyclic reference: buf1",
                            "index": "cyclic reference: 64*d0 + d1",
                            "size": [
                              "cyclic reference: 8",
                              "cyclic reference: 64"
                            ]
                          }
                        }
                      ],
                      "index_exprs": [],
                      "range_vars": [
                        "d0",
                        "d1"
                      ],
                      "var_ranges": {
                        "d0": "cyclic reference: 8",
                        "d1": "cyclic reference: 64"
                      }
                    }
                  },
                  "iter_reordering_reindex": {}
                }
              }
            },
            "users": {
              "class": "<class 'list'>",
              "content": [
                {
                  "dataclass": "<class 'torch._inductor.scheduler.NodeUser'>",
                  "content": {
                    "node": {
                      "unmet_dependencies": {
                        "class": "<class 'set'>",
                        "content": [
                          {
                            "namedtuple": "<class 'torch._inductor.dependencies.StarDep'>",
                            "content": {
                              "name": "cyclic reference: buf1"
                            }
                          }
                        ]
                      },
                      "inverse_users": {
                        "class": "<class 'list'>",
                        "content": [
                          "cyclic reference: SchedulerNode(name='buf1')"
                        ]
                      }
                    },
                    "can_inplace": "cyclic reference: False"
                  }
                }
              ]
            },
            "inverse_users": {
              "class": "<class 'list'>",
              "content": [
                "cyclic reference: ExternKernelSchedulerNode(name='buf0')"
              ]
            },
            "read_writes": {
              "class": "<class 'torch._inductor.dependencies.ReadWrites'>",
              "content": {
                "dataclass": "<class 'torch._inductor.dependencies.ReadWrites'>",
                "content": {
                  "reads": [
                    {
                      "namedtuple": "<class 'torch._inductor.dependencies.MemoryDep'>",
                      "content": {
                        "name": "cyclic reference: buf0",
                        "index": "c0",
                        "size": [
                          "512"
                        ]
                      }
                    }
                  ],
                  "writes": [
                    {
                      "namedtuple": "<class 'torch._inductor.dependencies.MemoryDep'>",
                      "content": {
                        "name": "cyclic reference: buf1",
                        "index": "cyclic reference: c0",
                        "size": [
                          "cyclic reference: 512"
                        ]
                      }
                    }
                  ],
                  "index_exprs": [],
                  "range_vars": [],
                  "var_ranges": {
                    "d0": "cyclic reference: 512"
                  }
                }
              }
            },
            "unmet_dependencies": {
              "class": "<class 'set'>",
              "content": [
                "cyclic reference: MemoryDep(name='buf0', index=c0, size=(512,))"
              ]
            },
            "recursive_predecessors": {
              "class": "<class 'set'>",
              "content": [
                "cyclic reference: buf0"
              ]
            },
            "min_order": {
              "class": "<class 'int'>",
              "content": "cyclic reference: 1"
            },
            "max_order": {
              "class": "<class 'int'>",
              "content": "cyclic reference: 1"
            },
            "last_usage": {
              "class": "<class 'set'>",
              "content": []
            },
            "written": {
              "class": "<class 'bool'>",
              "content": "cyclic reference: False"
            },
            "_sizes": {
              "class": "<class 'tuple'>",
              "content": [
                [
                  "cyclic reference: 512"
                ],
                []
              ]
            },
            "_body": {
              "class": "<class 'torch._inductor.ir.LoopBody'>",
              "content": {
                "var_ranges": {
                  "class": "<class 'collections.OrderedDict'>",
                  "content": {
                    "z0": "cyclic reference: 512"
                  }
                },
                "indexing_exprs": {
                  "class": "<class 'dict'>",
                  "content": {
                    "index0": "z0"
                  }
                },
                "indexing_exprs_name": {
                  "class": "<class 'dict'>",
                  "content": {
                    "z0": "index0"
                  }
                },
                "reads": {
                  "class": "<class 'list'>",
                  "content": [
                    "cyclic reference: z0",
                    "cyclic reference: z0"
                  ]
                },
                "writes": {
                  "class": "<class 'list'>",
                  "content": [
                    "cyclic reference: z0"
                  ]
                },
                "reads_name2expr": {
                  "class": "<class 'dict'>",
                  "content": {
                    "buf0": "cyclic reference: z0"
                  }
                },
                "writes_name2expr": {
                  "class": "<class 'dict'>",
                  "content": {
                    "buf1": "cyclic reference: z0"
                  }
                },
                "other": {
                  "class": "<class 'list'>",
                  "content": []
                },
                "submodules": {
                  "class": "<class 'dict'>",
                  "content": {
                    "get_index": {}
                  }
                },
                "subblocks": {
                  "class": "<class 'dict'>",
                  "content": {}
                },
                "indirect_vars": {
                  "class": "<class 'list'>",
                  "content": []
                },
                "root_block": {
                  "class": "<class 'torch._inductor.ir.LoopBodyBlock'>",
                  "content": {
                    "body": {
                      "class": "<class 'torch._inductor.ir.LoopBody'>",
                      "content": "cyclic reference: <torch._inductor.ir.LoopBody object at 0x7f52c13caef0>"
                    },
                    "name": {
                      "class": "<class 'str'>",
                      "content": "CaptureIndexing"
                    },
                    "graph": {
                      "class": "<class 'torch.fx.graph.Graph'>",
                      "content": "skip: graph():\n    %ops : [#users=11] = placeholder[target=ops]\n    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})\n    %load : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index), kwargs = {})\n    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.5, torch.float32), kwargs = {})\n    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})\n    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})\n    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index_1), kwargs = {})\n    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.7071067811865476, torch.float32), kwargs = {})\n    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})\n    %erf : [#users=1] = call_method[target=erf](args = (%ops, %mul_1), kwargs = {})\n    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.float32), kwargs = {})\n    %add : [#users=1] = call_method[target=add](args = (%ops, %erf, %constant_2), kwargs = {})\n    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %add), kwargs = {})\n    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})\n    %store : [#users=1] = call_method[target=store](args = (%ops, buf1, %get_index_2, %mul_2, None), kwargs = {})\n    return store"
                    }
                  }
                },
                "indexing": {
                  "class": "<class 'NoneType'>",
                  "content": "cyclic reference: None"
                }
              }
            },
            "group": {
              "class": "<class 'tuple'>",
              "content": [
                "cyclic reference: cuda:0",
                [
                  "cyclic reference: 512",
                  "cyclic reference: 1"
                ]
              ]
            }
          },
          "can_inplace": "cyclic reference: True"
        }
      },
      {
        "dataclass": "<class 'torch._inductor.scheduler.NodeUser'>",
        "content": {
          "node": {
            "unmet_dependencies": {
              "class": "<class 'set'>",
              "content": [
                {
                  "namedtuple": "<class 'torch._inductor.dependencies.StarDep'>",
                  "content": {
                    "name": "cyclic reference: buf0"
                  }
                }
              ]
            },
            "inverse_users": {
              "class": "<class 'list'>",
              "content": [
                "cyclic reference: ExternKernelSchedulerNode(name='buf0')"
              ]
            }
          },
          "can_inplace": "cyclic reference: False"
        }
      }
    ]
  },
  "inverse_users": {
    "class": "<class 'list'>",
    "content": []
  },
  "read_writes": {
    "class": "<class 'torch._inductor.dependencies.ReadWrites'>",
    "content": {
      "dataclass": "<class 'torch._inductor.dependencies.ReadWrites'>",
      "content": {
        "reads": [
          {
            "namedtuple": "<class 'torch._inductor.dependencies.StarDep'>",
            "content": {
              "name": "cyclic reference: primals_1"
            }
          },
          {
            "namedtuple": "<class 'torch._inductor.dependencies.StarDep'>",
            "content": {
              "name": "cyclic reference: primals_2"
            }
          },
          {
            "namedtuple": "<class 'torch._inductor.dependencies.StarDep'>",
            "content": {
              "name": "cyclic reference: primals_3"
            }
          }
        ],
        "writes": [
          {
            "namedtuple": "<class 'torch._inductor.dependencies.StarDep'>",
            "content": {
              "name": "cyclic reference: buf0"
            }
          }
        ],
        "index_exprs": [],
        "range_vars": [],
        "var_ranges": "cyclic reference: None"
      }
    }
  },
  "unmet_dependencies": {
    "class": "<class 'set'>",
    "content": []
  },
  "recursive_predecessors": {
    "class": "<class 'set'>",
    "content": []
  },
  "min_order": {
    "class": "<class 'int'>",
    "content": "cyclic reference: 0"
  },
  "max_order": {
    "class": "<class 'int'>",
    "content": "cyclic reference: 0"
  },
  "last_usage": {
    "class": "<class 'set'>",
    "content": [
      "cyclic reference: primals_1",
      "cyclic reference: primals_2"
    ]
  },
  "written": {
    "class": "<class 'bool'>",
    "content": "cyclic reference: False"
  }
}